version: "3"

services:
  pgdb:
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    container_name: pgdb
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - .:/data
    networks:
      backend:
  django:
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django
    depends_on:
      - pgdb
    volumes:
      - .:/code
    ports:
      - "${DOCKER_EXPOSE_PORT:-8016}:${DJANGO_PORT:-8016}"
    restart:
      unless-stopped
    command:
      "python manage.py runserver 0.0.0.0:${DJANGO_PORT:-8016}"
    networks:
      backend:
  redis:
    image: redis:5.0
    env_file: .env
    container_name: redis
    restart: unless-stopped
    volumes:
      - ./.docker/redis-data:/data
    ports:
      - ${REDIS_PORT}
    networks:
      backend:
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    image: celery:5.0
    container_name: celery
    command: "celery -A config worker -l INFO"
    depends_on:
      - redis
      - pgdb
    environment:
      CELERY_BROKER_URL: redis://${REDIS_HOST}:${REDIS_PORT}/
    restart: always
    networks:
      backend:
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    image: celery:5.0
    container_name: celery-beat
    command: "celery -A config beat -l INFO"
    depends_on:
      - redis
    environment:
      CELERY_BROKER_URL: redis://${REDIS_HOST}:${REDIS_PORT}/
      CELERY_RESULT_BACKEND: redis://${REDIS_HOST}:{REDIS_PORT}/
    restart: always
    networks:
      backend:
  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT}:8080"


networks:
  backend:
